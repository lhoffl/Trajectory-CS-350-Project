package View;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.AffineTransform;
import java.util.Random;

import javax.swing.JPanel;
import javax.swing.Timer;

import Model.Game;

public class TrajectoryPanel extends JPanel implements ActionListener{

	private double velX;
	private double velY;
	private double currTime;
	private final double gravity = 9.8;
	private Game game = new Game();
	private Random rand = new Random();
	private int n;

	//Fucking around
	Timer time = new Timer(5, this);
	int x = 0, speed = 1;

	public TrajectoryPanel(){

		setPreferredSize(new Dimension(100,100));
		n = rand.nextInt(90) + 250;
	}

	@Override
	public void paintComponent(Graphics g){
		super.paintComponent(g);
		Graphics2D g2d = (Graphics2D)g;

		//More fucking around
		//g.setColor(Color.RED);
		//g.fillRect(x, 30, 50, 30);


		double prevX = 0.0;
		double prevY = 0.0;
		double currX = 0.0;
		double currY = 0.0;

		//top border
		g.setColor(Color.BLUE);
		g2d.drawLine(0,0,getWidth(),0);

		//tank
		g.setColor(Color.GREEN);
		g2d.fillRect(0, 90, 20, 10);

		//target
		g.setColor(Color.RED);
		g2d.fillRect(n, x, 10, 10);
		//time.start();

		g.setColor(Color.BLACK);

		AffineTransform old = g2d.getTransform();

		for(double t = 0.0; t < currTime; t+=.01){

			//sets 0,0 to bottom left
			g2d.translate(20, getHeight()-10);
			g2d.scale(1, -1);getLayout();
			/*currX = velX * t;  //consider bouncing later
			currY = (velY * t) - (1/2)*(9.8 * (Math.pow(t, 2)));*/

			//formula from our game class
			velY = velY - (gravity * .01);
			currX += velX * .01;  //consider bouncing later
			currY += (velY * .01) - (1/2)*(gravity * (Math.pow(.01, 2)));

			g2d.drawLine((int)prevX, (int)prevY, (int)currX, (int)currY);
			//System.out.println(" CurrX: " + currX + " CurrY: " + currY + " velX: " + velX + " velY: " + velY);
			g2d.setTransform(old);

			//new starting points for next iteration
			prevX = currX;
			prevY = currY;

		}
	}

	public void changeTime(double chTime){
		currTime += chTime;
		repaint();
	}

	public void changeVel(double xVelocity, double yVelocity){

		velX = xVelocity;
		velY = yVelocity;
	}


	public void resetVelocities(){

		velX = 0.0;
		velY = 0.0;
	}

	//only for moving target
	@Override
	public void actionPerformed(ActionEvent event) {

		if(x < 0 || x > 91){
			speed = -speed;
		}
		x = x + speed;
		repaint();

	}

}